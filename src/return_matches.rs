use clap::{App, Arg, SubCommand, ArgMatches};
// return_matches returns a clap::ArgMatches
// https://docs.rs/clap/2.32.0/clap/struct.ArgMatches.html
pub fn return_matches<'a>() -> ArgMatches<'static> {
    // create and update for system are all shared, no reason to duplicate them
    let system_shared_args = vec!(
        Arg::with_name("serial")
            .required(false)
            .long("serial")
            .help("System serial number")
            .takes_value(true),
        Arg::with_name("asset-tag")
            .required(false)
            .long("asset-tag")
            .help("System asset-tag")
            .takes_value(true),
        Arg::with_name("switch-ports")
            .required(false)
            .long("switch-ports")
            .help("System switch-ports")
            .takes_value(true),
        Arg::with_name("oob-ip")
            .required(false)
            .long("oob-ip")
            .help("System oob-ip")
            .takes_value(true),
        Arg::with_name("oob-switch-port")
            .required(false)
            .long("oob-switch-port")
            .help("System oob-switch-port")
            .takes_value(true),
        Arg::with_name("patch-panel-port")
            .required(false)
            .long("patch-panel-port")
            .help("System patch-panel-port")
            .takes_value(true),
        Arg::with_name("server-model")
            .required(false)
            .long("server-model")
            .help("ID of server-model")
            .takes_value(true),
        Arg::with_name("system-status")
            .required(false)
            .long("system-status")
            .help("ID of system-status")
            .takes_value(true),
        Arg::with_name("system-type")
            .required(false)
            .long("system-type")
            .help("ID of system-type")
            .takes_value(true),
        Arg::with_name("system-rack")
            .required(false)
            .long("system-rack")
            .help("ID of system-rack")
            .takes_value(true),
        Arg::with_name("rack-order")
            .required(false)
            .long("rack-order")
            .help("rack order from bottom of rack")
            .takes_value(true),
        Arg::with_name("operating-system")
            .required(false)
            .long("operating-system")
            .help("ID of operating-system")
            .takes_value(true),
        Arg::with_name("notes")
            .required(false)
            .long("notes")
            .help("notes text")
            .takes_value(true),
        Arg::with_name("warranty-start")
            .required(false)
            .long("warranty-start")
            .help("warranty-start YYYY-mm-dd")
            .takes_value(true),
        Arg::with_name("warranty-end")
            .required(false)
            .long("warranty-end")
            .help("warranty-end YYYY-mm-dd")
            .takes_value(true),
        Arg::with_name("pdu1")
            .required(false)
            .long("pdu1")
            .help("pdu1")
            .takes_value(true),
        Arg::with_name("pdu2")
            .required(false)
            .long("pdu2")
            .help("pdu2")
            .takes_value(true),
        Arg::with_name("append-notes")
            .required(false)
            .long("append-notes")
            .help("append-notes")
            .takes_value(true),
    );
        let matches = App::new("minvtool")
        .about("CLI interface to Mozilla Inventory")
        .version("0.0.1")
        .author("Rob Tucker <rtucker@mozilla.com>")
        .subcommand(SubCommand::with_name("servermodel")
            .about("Interfaces with ServerModel Objects")
            .subcommand(SubCommand::with_name("search")
                .about("Search ServerModel")
                .arg(Arg::with_name("search")
                    .required(true)
                    .help("Search for Server Models")
                )
            )
        )
        .subcommand(SubCommand::with_name("operatingsystem")
            .about("Interfaces with OperatingSystem Objects")
            .subcommand(SubCommand::with_name("search")
                .about("Search OperatingSystem")
                .arg(Arg::with_name("search")
                    .required(true)
                    .help("Search for Operating System")
                )
            )
            .subcommand(SubCommand::with_name("list")
                .about("List All Operating Systems")
            )
        )
        .subcommand(SubCommand::with_name("systemrack")
            .about("Interfaces with SystemRack Objects")
            .subcommand(SubCommand::with_name("create")
                .about("Creates SystemRack")
                .arg(Arg::with_name("name")
                    .required(true)
                    .index(1)
                    .help("Hostname of System to be created")
                )
                .arg(Arg::with_name("site")
                    .required(true)
                    .index(2)
                    .help("Site where SystemRack is located")
                )
            )
            .subcommand(SubCommand::with_name("search")
                .about("Search SystemRack")
                .arg(Arg::with_name("search")
                    .required(true)
                    .help("Search for System Rack")
                )
            )
            .subcommand(SubCommand::with_name("list")
                .about("List All System Rack")
            )
            .subcommand(SubCommand::with_name("get")
                .about("GET SystemRack")
                .arg(Arg::with_name("rack_id")
                    .required(true)
                    .help("Search for System Rack")
                )
                .arg(Arg::with_name("tabular")
                    .required(false)
                    .long("tabular")
                    .help("Display systems in table format")
                )
            )
        )
        .subcommand(SubCommand::with_name("systemtype")
            .about("Interfaces with SystemType Objects")
            .subcommand(SubCommand::with_name("search")
                .about("Search SystemType")
                .arg(Arg::with_name("search")
                    .required(true)
                    .help("Search for System Type")
                )
            )
            .subcommand(SubCommand::with_name("list")
                .about("List All System Types")
            )
        )
        .subcommand(SubCommand::with_name("system")
            .about("Interfaces with System Objects")
            .subcommand(SubCommand::with_name("get")
                .about("Get System")
                .arg(Arg::with_name("hostname")
                    .required(true)
                    .help("Hostname of System to be retrieved")
                )
            )
            .subcommand(SubCommand::with_name("delete")
                .about("Delete System Objects")
                .arg(Arg::with_name("hostname")
                    .required(true)
                    .help("Hostname of System to be created")
                )
            )
            .subcommand(SubCommand::with_name("update")
                .about("Updates System Objects")
                .arg(Arg::with_name("hostname")
                    .required(true)
                    .help("Hostname of System to be updated")
                )
                // utilize system_shared_args again here as create and update have the same options
                .args(&system_shared_args)
            )
            .subcommand(SubCommand::with_name("create")
                .about("Creates System Objects")
                .arg(Arg::with_name("hostname")
                    .required(true)
                    .help("Hostname of System to be created")
                )
                // utilize system_shared_args again here as create and update have the same options
                .args(&system_shared_args)
            )
            
        )
        .get_matches();
        return matches;

}